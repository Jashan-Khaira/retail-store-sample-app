version: 0.2
env:
  parameter-store:
    DOCKER_USERNAME: "/secrets/docker-hub/DOCKER_USERNAME"
    DOCKER_PASSWORD: "/secrets/docker-hub/DOCKER_PASSWORD"
phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - yum update -y
      - yum install -y docker jq
      - nohup dockerd &
      - sleep 5
      - curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
      - chmod +x /usr/local/bin/docker-compose
  pre_build:
    commands:
      - echo Logging in to Docker Hub and Amazon ECR...
      - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 061039764011.dkr.ecr.us-east-1.amazonaws.com
      # Create CloudWatch log group
      - aws logs create-log-group --log-group-name /ecs/retail-store || true
  build:
    commands:
      # Test locally first
      - cd dist/docker-compose
      - echo "Starting containers..."
      - MYSQL_PASSWORD='123456789' docker-compose up -d
      - sleep 30
      - docker-compose ps
      - docker images
      
      # Tag and push images to ECR
      - |
        echo "Tagging and pushing images to ECR..."
        declare -A images=(
          ["ui"]="public.ecr.aws/aws-containers/retail-store-sample-ui:0.8.3"
          ["assets"]="public.ecr.aws/aws-containers/retail-store-sample-assets:0.8.3"
          ["cart"]="public.ecr.aws/aws-containers/retail-store-sample-cart:0.8.3"
          ["catalog"]="public.ecr.aws/aws-containers/retail-store-sample-catalog:0.8.3"
          ["checkout"]="public.ecr.aws/aws-containers/retail-store-sample-checkout:0.8.3"
          ["orders"]="public.ecr.aws/aws-containers/retail-store-sample-orders:0.8.3"
        )
        
        for service in "${!images[@]}"; do
          echo "Processing $service..."
          docker tag "${images[$service]}" "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-$service:latest"
          docker push "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-$service:latest" || exit 1
        done
      
      # Clean up local containers
      - docker-compose down
      
      # Generate ECS task definition for supporting services (databases, message broker)
      - |
        cat > task-definition-support.json << 'EOF'
        {
          "family": "retail-store-support",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "2048",
          "memory": "4096",
          "taskRoleArn": "arn:aws:iam::061039764011:role/service-role/codebuild-retail-store-static-analysis-service-role",
          "executionRoleArn": "arn:aws:iam::061039764011:role/service-role/codebuild-retail-store-static-analysis-service-role",
          "containerDefinitions": [
            {
              "name": "carts-db",
              "image": "amazon/dynamodb-local:1.20.0",
              "portMappings": [{"containerPort": 8000}]
            },
            {
              "name": "catalog-db",
              "image": "mariadb:10.9",
              "portMappings": [{"containerPort": 3306}],
              "environment": [
                {"name": "MYSQL_ROOT_PASSWORD", "value": "123456789"},
                {"name": "MYSQL_DATABASE", "value": "catalog"}
              ]
            },
            {
              "name": "checkout-redis",
              "image": "redis:6-alpine",
              "portMappings": [{"containerPort": 6379}]
            },
            {
              "name": "orders-db",
              "image": "postgres:16.1",
              "portMappings": [{"containerPort": 5432}],
              "environment": [
                {"name": "POSTGRES_DB", "value": "orders"},
                {"name": "POSTGRES_USER", "value": "postgres"},
                {"name": "POSTGRES_PASSWORD", "value": "123456789"}
              ]
            },
            {
              "name": "rabbitmq",
              "image": "rabbitmq:3-management",
              "portMappings": [
                {"containerPort": 5672},
                {"containerPort": 15672}
              ]
            }
          ]
        }
        EOF

      # Generate ECS task definition for main services
      - |
        cat > task-definition-main.json << 'EOF'
        {
          "family": "retail-store-main",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "2048",
          "memory": "4096",
          "taskRoleArn": "arn:aws:iam::061039764011:role/service-role/codebuild-retail-store-static-analysis-service-role",
          "executionRoleArn": "arn:aws:iam::061039764011:role/service-role/codebuild-retail-store-static-analysis-service-role",
          "containerDefinitions": [
            {
              "name": "ui",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-ui:latest",
              "essential": true,
              "portMappings": [{"containerPort": 8080}]
            },
            {
              "name": "assets",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-assets:latest",
              "portMappings": [{"containerPort": 8080}]
            },
            {
              "name": "cart",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-cart:latest",
              "portMappings": [{"containerPort": 8080}]
            },
            {
              "name": "catalog",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-catalog:latest",
              "portMappings": [{"containerPort": 8080}]
            },
            {
              "name": "checkout",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-checkout:latest",
              "portMappings": [{"containerPort": 8080}]
            },
            {
              "name": "orders",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-orders:latest",
              "portMappings": [{"containerPort": 8080}]
            }
          ]
        }
        EOF
      
      # Deploy supporting services first
      - aws ecs register-task-definition --cli-input-json file://task-definition-support.json
      - |
        SUPPORT_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition retail-store-support --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Create or update support service
        aws ecs create-service \
          --cluster retail-store \
          --service-name retail-store-support-service \
          --task-definition $SUPPORT_TASK_DEF_ARN \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-06aa37fd],securityGroups=[sg-068ffbbf3f461bce2],assignPublicIp=ENABLED}" || \
        aws ecs update-service \
          --cluster retail-store \
          --service retail-store-support-service \
          --task-definition $SUPPORT_TASK_DEF_ARN \
          --force-new-deployment

      # Wait for support services to be stable
      - echo "Waiting for support services to be stable..."
      - aws ecs wait services-stable --cluster retail-store --services retail-store-support-service || true
      
      # Deploy main services
      - aws ecs register-task-definition --cli-input-json file://task-definition-main.json
      - |
        MAIN_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition retail-store-main --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Create or update main service
        aws ecs create-service \
          --cluster retail-store \
          --service-name retail-store-main-service \
          --task-definition $MAIN_TASK_DEF_ARN \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-06aa37fd],securityGroups=[sg-068ffbbf3f461bce2],assignPublicIp=ENABLED}" || \
        aws ecs update-service \
          --cluster retail-store \
          --service retail-store-main-service \
          --task-definition $MAIN_TASK_DEF_ARN \
          --force-new-deployment
  post_build:
    commands:
      - echo "Waiting for services to be stable..."
      - aws ecs wait services-stable --cluster retail-store --services retail-store-main-service || true
      - echo "Service deployment completed"
artifacts:
  files:
    - dist/docker-compose/docker-compose.yml
    - task-definition-support.json
    - task-definition-main.json
    - appspec.yml
  name: docker-artifact
