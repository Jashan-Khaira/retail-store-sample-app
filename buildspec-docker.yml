version: 0.2
env:
  parameter-store:
    DOCKER_USERNAME: "/secrets/docker-hub/DOCKER_USERNAME"
    DOCKER_PASSWORD: "/secrets/docker-hub/DOCKER_PASSWORD"
phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - yum update -y
      - yum install -y docker jq
      - nohup dockerd &
      - sleep 5
      - curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
      - chmod +x /usr/local/bin/docker-compose
  pre_build:
    commands:
      - echo Logging in to Docker Hub and Amazon ECR...
      - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 061039764011.dkr.ecr.us-east-1.amazonaws.com
      # Create CloudWatch log group
      - aws logs create-log-group --log-group-name /ecs/retail-store || true
      
      # Create IAM roles for ECS tasks
      - |
        echo '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }' > trust-policy.json
        
        # Create ECS task execution role
        aws iam create-role \
          --role-name ecsTaskExecutionRole-retail-store \
          --assume-role-policy-document file://trust-policy.json || true
        
        # Attach required policies
        aws iam attach-role-policy \
          --role-name ecsTaskExecutionRole-retail-store \
          --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy || true
        
        # Create ECS task role
        aws iam create-role \
          --role-name ecsTaskRole-retail-store \
          --assume-role-policy-document file://trust-policy.json || true
        
        # Attach required policies for task role
        aws iam attach-role-policy \
          --role-name ecsTaskRole-retail-store \
          --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess || true
        
        # Wait for roles to be available
        sleep 10

  build:
    commands:
      # Test locally first
      - cd dist/docker-compose
      - echo "Starting containers..."
      - MYSQL_PASSWORD='123456789' docker-compose up -d
      - sleep 30
      - docker-compose ps
      - docker images
      
      # Tag and push images to ECR
      - |
        echo "Tagging and pushing images to ECR..."
        declare -A images=(
          ["ui"]="public.ecr.aws/aws-containers/retail-store-sample-ui:0.8.3"
          ["assets"]="public.ecr.aws/aws-containers/retail-store-sample-assets:0.8.3"
          ["cart"]="public.ecr.aws/aws-containers/retail-store-sample-cart:0.8.3"
          ["catalog"]="public.ecr.aws/aws-containers/retail-store-sample-catalog:0.8.3"
          ["checkout"]="public.ecr.aws/aws-containers/retail-store-sample-checkout:0.8.3"
          ["orders"]="public.ecr.aws/aws-containers/retail-store-sample-orders:0.8.3"
        )
        
        for service in "${!images[@]}"; do
          echo "Processing $service..."
          docker tag "${images[$service]}" "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-$service:latest"
          docker push "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-$service:latest" || exit 1
        done
      
      # Clean up local containers
      - docker-compose down
      
      # Generate ECS task definition for supporting services
      - |
        cat > task-definition-support.json << 'EOF'
        {
          "family": "retail-store-support",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "4096",
          "memory": "8192",
          "taskRoleArn": "arn:aws:iam::061039764011:role/ecsTaskRole-retail-store",
          "executionRoleArn": "arn:aws:iam::061039764011:role/ecsTaskExecutionRole-retail-store",
          "containerDefinitions": [
            {
              "name": "carts-db",
              "image": "amazon/dynamodb-local:1.20.0",
              "portMappings": [{"containerPort": 8000, "protocol": "tcp"}],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "carts-db"
                }
              }
            },
            {
              "name": "catalog-db",
              "image": "mariadb:10.9",
              "portMappings": [{"containerPort": 3306, "protocol": "tcp"}],
              "environment": [
                {"name": "MYSQL_ROOT_PASSWORD", "value": "123456789"},
                {"name": "MYSQL_DATABASE", "value": "catalog"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "catalog-db"
                }
              }
            },
            {
              "name": "checkout-redis",
              "image": "redis:6-alpine",
              "portMappings": [{"containerPort": 6379, "protocol": "tcp"}],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "checkout-redis"
                }
              }
            },
            {
              "name": "orders-db",
              "image": "postgres:16.1",
              "portMappings": [{"containerPort": 5432, "protocol": "tcp"}],
              "environment": [
                {"name": "POSTGRES_DB", "value": "orders"},
                {"name": "POSTGRES_USER", "value": "postgres"},
                {"name": "POSTGRES_PASSWORD", "value": "123456789"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "orders-db"
                }
              }
            },
            {
              "name": "rabbitmq",
              "image": "rabbitmq:3-management",
              "portMappings": [
                {"containerPort": 5672, "protocol": "tcp"},
                {"containerPort": 15672, "protocol": "tcp"},
                {"containerPort": 4369, "protocol": "tcp"},
                {"containerPort": 5671, "protocol": "tcp"},
                {"containerPort": 15671, "protocol": "tcp"},
                {"containerPort": 25672, "protocol": "tcp"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "rabbitmq"
                }
              }
            }
          ]
        }
        EOF

      # Generate ECS task definition for main services
      - |
        cat > task-definition-main.json << 'EOF'
        {
          "family": "retail-store-main",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "4096",
          "memory": "12288",
          "taskRoleArn": "arn:aws:iam::061039764011:role/ecsTaskRole-retail-store",
          "executionRoleArn": "arn:aws:iam::061039764011:role/ecsTaskExecutionRole-retail-store",
          "containerDefinitions": [
            {
              "name": "ui",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-ui:latest",
              "essential": true,
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "PORT", "value": "8080"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ui"
                }
              }
            },
            {
              "name": "assets",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-assets:latest",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "PORT", "value": "8080"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "assets"
                }
              }
            },
            {
              "name": "cart",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-cart:latest",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "PORT", "value": "8080"},
                {"name": "CARTS_DB_HOST", "value": "localhost"},
                {"name": "CARTS_DB_PORT", "value": "8000"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "cart"
                }
              }
            },
            {
              "name": "catalog",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-catalog:latest",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "PORT", "value": "8080"},
                {"name": "DB_HOST", "value": "localhost"},
                {"name": "DB_PORT", "value": "3306"},
                {"name": "DB_NAME", "value": "catalog"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "catalog"
                }
              }
            },
            {
              "name": "checkout",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-checkout:latest",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "PORT", "value": "8080"},
                {"name": "REDIS_HOST", "value": "localhost"},
                {"name": "REDIS_PORT", "value": "6379"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "checkout"
                }
              }
            },
            {
              "name": "orders",
              "image": "061039764011.dkr.ecr.us-east-1.amazonaws.com/retail-store-orders:latest",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "PORT", "value": "8080"},
                {"name": "DB_HOST", "value": "localhost"},
                {"name": "DB_PORT", "value": "5432"},
                {"name": "DB_NAME", "value": "orders"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/retail-store",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "orders"
                }
              }
            }
          ]
        }
        EOF
      
      # Deploy supporting services first
      - aws ecs register-task-definition --cli-input-json file://task-definition-support.json
      - |
        echo "Getting support task definition ARN..."
        SUPPORT_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition retail-store-support --query 'taskDefinition.taskDefinitionArn' --output text)
        
        if [ -z "$SUPPORT_TASK_DEF_ARN" ]; then
          echo "Failed to get support task definition ARN"
          exit 1
        fi
        
        echo "Using support task definition: $SUPPORT_TASK_DEF_ARN"
        
        # Create or update support service
        if aws ecs describe-services --cluster retail-store --services retail-store-support-service --query 'services[0].status' --output text 2>/dev/null; then
          echo "Updating existing support service..."
          aws ecs update-service \
            --cluster retail-store \
            --service retail-store-support-service \
            --task-definition "$SUPPORT_TASK_DEF_ARN" \
            --force-new-deployment
        else
          echo "Creating new support service..."
          aws ecs create-service \
            --cluster retail-store \
            --service-name retail-store-support-service \
            --task-definition "$SUPPORT_TASK_DEF_ARN" \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-00fb14dcb92d6fe8f],securityGroups=[sg-068ffbbf3f461bce2],assignPublicIp=ENABLED}"
        fi

      # Wait for support services with debugging
      - |
        echo "Waiting for support services to be stable..."
        MAX_ATTEMPTS=30
        ATTEMPT=0
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          echo "Checking support service status (Attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)..."
          
          SERVICE_JSON=$(aws ecs describe-services --cluster retail-store --services retail-store-support-service)
          STATUS=$(echo $SERVICE_JSON | jq -r '.services[0].status')
          RUNNING_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].runningCount')
          DESIRED_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].desiredCount')
          
          echo "Status: $STATUS, Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"
          
          if [ "$STATUS" = "ACTIVE" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
            echo "Support service is stable"
            break
          fi
          
          # Get latest task status and events
          echo "Recent service events:"
          aws ecs describe-services --cluster retail-store --services retail-store-support-service --query 'services[0].events[0:5]'
          
          TASK_ARN=$(aws ecs list-tasks --cluster retail-store --service-name retail-store-support-service --query 'taskArns[0]' --output text)
          if [ "$TASK_ARN" != "None" ]; then
            echo "Latest task status:"
            aws ecs describe-tasks --cluster retail-store --tasks $TASK_ARN
          fi
          
          sleep 20
          ATTEMPT=$((ATTEMPT+1))
        done
      
      # Deploy main services
      - aws ecs register-task-definition --cli-input-json file://task-definition-main.json
      - |
        echo "Getting main task definition ARN..."
        MAIN_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition retail-store-main --query 'taskDefinition.taskDefinitionArn' --output text)
        
        if [ -z "$MAIN_TASK_DEF_ARN" ]; then
          echo "Failed to get main task definition ARN"
          exit 1
        fi
        
        echo "Using main task definition: $MAIN_TASK_DEF_ARN"
        
        # Create or update main service
        if aws ecs describe-services --cluster retail-store --services retail-store-main-service --query 'services[0].status' --output text 2>/dev/null; then
          echo "Updating existing main service..."
          aws ecs update-service \
            --cluster retail-store \
            --service retail-store-main-service \
            --task-definition "$MAIN_TASK_DEF_ARN" \
            --force-new-deployment
        else
          echo "Creating new main service..."
          aws ecs create-service \
            --cluster retail-store \
            --service-name retail-store-main-service \
            --task-definition "$MAIN_TASK_DEF_ARN" \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-00fb14dcb92d6fe8f],securityGroups=[sg-068ffbbf3f461bce2],assignPublicIp=ENABLED}"
        fi

      # Wait for main service with debugging
      - |
        echo "Waiting for main service to be stable..."
        MAX_ATTEMPTS=30
        ATTEMPT=0
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          echo "Checking main service status (Attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)..."
          
          SERVICE_JSON=$(aws ecs describe-services --cluster retail-store --services retail-store-main-service)
          STATUS=$(echo $SERVICE_JSON | jq -r '.services[0].status')
          RUNNING_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].runningCount')
          DESIRED_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].desiredCount')
          
          echo "Status: $STATUS, Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"
          
          if [ "$STATUS" = "ACTIVE" ] && [ "$RUNNING_COUNT" = "$DESIRED_COUNT" ]; then
            echo "Main service is stable"
            break
          fi
          
          # Get latest task status and events
          echo "Recent service events:"
          aws ecs describe-services --cluster retail-store --services retail-store-main-service --query 'services[0].events[0:5]'
          
          TASK_ARN=$(aws ecs list-tasks --cluster retail-store --service-name retail-store-main-service --query 'taskArns[0]' --output text)
          if [ "$TASK_ARN" != "None" ]; then
            echo "Latest task status:"
            aws ecs describe-tasks --cluster retail-store --tasks $TASK_ARN
          fi
          
          sleep 20
          ATTEMPT=$((ATTEMPT+1))
        done

  post_build:
    commands:
      - echo "Service deployment completed"
      # Print final status of both services
      - |
        echo "Final status of services:"
        echo "Support service:"
        aws ecs describe-services --cluster retail-store --services retail-store-support-service
        echo "Main service:"
        aws ecs describe-services --cluster retail-store --services retail-store-main-service

artifacts:
  files:
    - dist/docker-compose/docker-compose.yml
    - task-definition-support.json
    - task-definition-main.json
    - appspec.yml
  name: docker-artifact
